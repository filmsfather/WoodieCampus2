{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "프로젝트 인프라 및 기본 아키텍처 설정",
        "description": "React + TypeScript 프론트엔드, Node.js + PostgreSQL 백엔드로 전체 시스템 기반 구조 구축",
        "details": "React 18 + TypeScript로 웹 애플리케이션 초기화, Node.js Express 서버 설정, PostgreSQL 데이터베이스 설정, Docker 컨테이너화, API Gateway (Kong/Nginx) 구성, Redis 캐시 레이어 설정, Socket.io 실시간 통신 기반 구축. ESLint, Prettier, Jest 테스팅 환경 포함.",
        "testStrategy": "Docker 컨테이너 정상 실행, 기본 API 엔드포인트 응답, 데이터베이스 연결, Redis 캐시 작동, Socket.io 연결 테스트",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "React + TypeScript 프론트엔드 초기 설정 및 개발 환경 구성",
            "description": "React 18과 TypeScript를 사용한 프론트엔드 애플리케이션 초기 설정 및 개발 도구 구성",
            "dependencies": [],
            "details": "Create React App 또는 Vite를 사용하여 TypeScript 프로젝트 초기화, ESLint, Prettier, Husky pre-commit 훅 설정, 기본 컴포넌트 구조 및 라우팅(React Router) 설정, 환경 변수 관리(.env), 빌드 스크립트 구성, Jest 및 React Testing Library 테스트 환경 설정",
            "status": "done",
            "testStrategy": "컴포넌트 렌더링 테스트, ESLint 규칙 검증, TypeScript 컴파일 오류 없음, 빌드 프로세스 정상 작동 확인"
          },
          {
            "id": 2,
            "title": "Node.js Express 서버 및 API 기본 구조 설정",
            "description": "Node.js Express 기반 백엔드 서버 초기 설정 및 기본 API 엔드포인트 구성",
            "dependencies": [],
            "details": "Express.js 서버 설정, TypeScript 개발 환경(ts-node, nodemon) 구성, 기본 미들웨어(helmet, cors, express.json) 설정, 환경별 설정 관리, 에러 핸들링 미들웨어, 로깅 시스템(Winston), API 라우터 구조 설정, 헬스 체크 엔드포인트 구현",
            "status": "done",
            "testStrategy": "서버 시작 테스트, 기본 API 엔드포인트 응답 확인, 미들웨어 동작 검증, 에러 처리 테스트"
          },
          {
            "id": 3,
            "title": "PostgreSQL 데이터베이스 및 Redis 캐시 시스템 설정",
            "description": "PostgreSQL 데이터베이스 초기 설정, 연결 구성 및 Redis 캐시 레이어 구축",
            "dependencies": [],
            "details": "PostgreSQL 데이터베이스 설정, 연결 풀 관리(pg-pool), 데이터베이스 마이그레이션 도구 설정, Redis 서버 설정 및 Node.js 연결, 캐시 전략 구현, 데이터베이스 백업 및 복구 스크립트, 환경별 데이터베이스 설정, 연결 상태 모니터링",
            "status": "done",
            "testStrategy": "데이터베이스 연결 테스트, Redis 캐시 읽기/쓰기 테스트, 연결 풀 관리 검증, 백업/복구 프로세스 테스트"
          },
          {
            "id": 4,
            "title": "Docker 컨테이너화 및 개발 환경 오케스트레이션",
            "description": "전체 애플리케이션의 Docker 컨테이너화 및 docker-compose를 통한 개발 환경 구성",
            "dependencies": [
              "1.1",
              "1.2",
              "1.3"
            ],
            "details": "프론트엔드, 백엔드용 Dockerfile 작성, 멀티 스테이지 빌드 구성, docker-compose.yml로 전체 서비스 오케스트레이션(React, Node.js, PostgreSQL, Redis), 개발용/프로덕션용 환경 분리, 볼륨 마운트 설정, 네트워크 구성, 환경 변수 관리, Docker 이미지 최적화",
            "status": "done",
            "testStrategy": "모든 컨테이너 정상 시작, 서비스 간 통신 확인, 볼륨 데이터 영속성 테스트, 개발 환경 핫 리로드 동작"
          },
          {
            "id": 5,
            "title": "API Gateway 및 Socket.io 실시간 통신 인프라 구축",
            "description": "Kong 또는 Nginx 기반 API Gateway 구성 및 Socket.io를 통한 실시간 통신 시스템 설정",
            "dependencies": [
              "1.2",
              "1.4"
            ],
            "details": "Kong 또는 Nginx API Gateway 설정, 라우팅 규칙 및 로드 밸런싱 구성, Rate limiting, CORS 정책 설정, Socket.io 서버 설정, 실시간 이벤트 처리 아키텍처, 클라이언트 Socket.io 연결 관리, 네임스페이스 및 룸 관리, 인증된 사용자의 Socket 연결 관리",
            "status": "done",
            "testStrategy": "API Gateway 라우팅 테스트, Rate limiting 동작 확인, Socket.io 연결/해제 테스트, 실시간 메시지 전송 검증, 다중 클라이언트 동시 연결 테스트"
          }
        ]
      },
      {
        "id": 2,
        "title": "사용자 인증 및 권한 관리 시스템 구현",
        "description": "JWT 기반 인증, 역할별 권한 관리, 보안 미들웨어 구축",
        "details": "JWT 토큰 기반 로그인/로그아웃, 역할별 권한 시스템 (학생/교사/실장), bcrypt 비밀번호 해싱, 인증 미들웨어, 토큰 갱신 메커니즘, 보안 헤더 설정, Rate limiting, CORS 설정, 세션 관리.",
        "testStrategy": "로그인/로그아웃 플로우 테스트, 권한별 API 접근 제어 확인, 토큰 만료 처리, 보안 취약점 스캔",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "JWT 토큰 기반 인증 시스템 구현",
            "description": "JWT 토큰 생성, 검증, 갱신 메커니즘과 로그인/로그아웃 API 엔드포인트 구현",
            "dependencies": [],
            "details": "JWT 라이브러리 설정, 토큰 생성/검증 함수, 리프레시 토큰 메커니즘, 로그인/로그아웃 API, 토큰 만료 처리, 블랙리스트 관리",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "비밀번호 암호화 및 사용자 인증 로직 구현",
            "description": "bcrypt를 이용한 비밀번호 해싱 및 사용자 인증 검증 로직 구현",
            "dependencies": [],
            "details": "bcrypt 라이브러리 통합, 비밀번호 해싱 함수, 로그인 시 비밀번호 검증, 솔트 라운드 설정, 비밀번호 정책 적용",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "역할별 권한 관리 시스템 구축",
            "description": "학생/교사/실장 역할 기반 접근 제어(RBAC) 시스템 및 권한 매트릭스 구현",
            "dependencies": [
              "2.1"
            ],
            "details": "역할 정의 및 데이터베이스 스키마, 권한 매트릭스 설계, 역할별 리소스 접근 제어, 권한 상속 구조, 동적 권한 할당",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "인증 및 권한 검증 미들웨어 개발",
            "description": "Express.js 미들웨어로 토큰 검증 및 권한 확인 로직 구현",
            "dependencies": [
              "2.1",
              "2.3"
            ],
            "details": "JWT 토큰 검증 미들웨어, 권한 체크 미들웨어, 라우트 보호 로직, 에러 핸들링, 토큰 추출 및 검증",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "보안 미들웨어 및 헤더 설정 구현",
            "description": "CORS, 보안 헤더, Rate limiting 등 종합적인 보안 미들웨어 구성",
            "dependencies": [],
            "details": "CORS 정책 설정, Helmet.js 보안 헤더, Rate limiting 구현, CSRF 보호, XSS 방지, 보안 로깅",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "세션 관리 및 토큰 갱신 시스템 구현",
            "description": "Redis 기반 세션 저장소와 자동 토큰 갱신 메커니즘 구현",
            "dependencies": [
              "2.1"
            ],
            "details": "Redis 세션 스토어 연동, 세션 만료 관리, 자동 토큰 갱신 API, 동시 로그인 제한, 세션 무효화 처리",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 3,
        "title": "데이터베이스 스키마 설계 및 모델 구현",
        "description": "전체 시스템의 데이터 모델 설계 및 ORM 설정",
        "details": "PostgreSQL 스키마 설계 (users, problem_sets, problems, notices, forum_posts, attendance_records 등), Prisma ORM 설정, 데이터베이스 마이그레이션 스크립트, 인덱스 최적화, 외래키 관계 설정, 시드 데이터 준비.",
        "testStrategy": "마이그레이션 실행 테스트, 모델 관계 검증, 인덱스 성능 테스트, 시드 데이터 정상 삽입 확인",
        "priority": "high",
        "dependencies": [
          1,
          2
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "핵심 도메인 엔티티 스키마 설계",
            "description": "사용자, 문제집, 문제, 공지사항 등 핵심 엔티티의 데이터베이스 테이블 스키마 설계",
            "dependencies": [],
            "details": "users, problem_sets, problems, notices 테이블 구조 설계. 각 테이블의 컬럼 정의, 데이터 타입 설정, 제약 조건 설정. 사용자 역할(학생/교사/실장) 구분, 문제집-문제 계층 구조, 공지사항 카테고리 분류 포함.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "게시판 및 소통 관련 스키마 설계",
            "description": "포럼, 게시글, 댓글, 메시징 시스템의 데이터베이스 스키마 설계",
            "dependencies": [
              "3.1"
            ],
            "details": "forum_posts, comments, messages, notifications 테이블 설계. 게시글 분류 체계, 댓글 중첩 구조, 개인/그룹 메시징, 알림 시스템 데이터 구조. 첨부파일, 태그, 검색 최적화를 위한 스키마 설계.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "학습 및 근태 관련 스키마 설계",
            "description": "출석 기록, 학습 진도, 성취도 데이터를 위한 데이터베이스 스키마 설계",
            "dependencies": [
              "3.1"
            ],
            "details": "attendance_records, learning_progress, achievements, schedules 테이블 설계. GPS 좌표 저장, 근무 시간 계산, 학습 세션 추적, 성취 배지 시스템. 시계열 데이터 최적화 및 집계 테이블 구조 포함.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "엔티티 간 관계 설정 및 외래키 구성",
            "description": "모든 테이블 간의 관계 정의 및 외래키 제약조건 설정",
            "dependencies": [
              "3.1",
              "3.2",
              "3.3"
            ],
            "details": "테이블 간 1:1, 1:N, N:N 관계 정의. 외래키 제약조건 설정, 참조 무결성 보장. CASCADE, RESTRICT 옵션 설정. 순환 참조 방지 및 관계 최적화. ERD 문서화 포함.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Prisma ORM 스키마 설정 및 모델 정의",
            "description": "Prisma schema 파일 작성 및 TypeScript 모델 생성 설정",
            "dependencies": [
              "3.4"
            ],
            "details": "schema.prisma 파일 작성, 데이터베이스 연결 설정, 모델 정의 및 관계 매핑. 커스텀 타입 정의, 인덱스 설정, 미들웨어 구성. TypeScript 타입 자동 생성 설정 및 클라이언트 최적화.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "데이터베이스 마이그레이션 및 인덱스 최적화",
            "description": "마이그레이션 스크립트 작성 및 성능 최적화를 위한 인덱스 설계",
            "dependencies": [
              "3.5"
            ],
            "details": "초기 마이그레이션 스크립트 생성, 단계별 마이그레이션 전략 수립. 쿼리 성능 최적화를 위한 복합 인덱스 설계, B-tree/Hash 인덱스 선택, 파티셔닝 전략. 마이그레이션 롤백 계획 수립.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "시드 데이터 준비 및 초기 데이터 설정",
            "description": "개발 및 테스트를 위한 시드 데이터 작성 및 초기 설정 데이터 구성",
            "dependencies": [
              "3.6"
            ],
            "details": "개발용 더미 데이터 생성 스크립트 작성. 사용자 계정, 샘플 문제집, 테스트 문제, 기본 설정값 준비. 실제 운영 데이터 형태와 유사한 시드 데이터 구성. 데이터 일관성 검증 및 자동화 스크립트 작성.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 4,
        "title": "문제 및 문제집 관리 시스템 구현",
        "description": "문제 생성, 편집, 문제집 구성 기능 개발",
        "details": "문제 CRUD API, 문제집 빌더 인터페이스, 태그 및 카테고리 시스템, 문제집 템플릿 기능, 버전 관리, 문제 뱅크 검색, 문제집 공유 기능, 문제별 가중치 설정, 드래그앤드롭 순서 변경.",
        "testStrategy": "문제 CRUD 동작 확인, 문제집 생성 및 편집 테스트, 태그 필터링, 템플릿 저장/불러오기, 공유 권한 검증",
        "priority": "high",
        "dependencies": [
          2,
          3
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "문제 CRUD API 설계 및 구현",
            "description": "문제 생성, 조회, 수정, 삭제를 위한 RESTful API 엔드포인트 구현",
            "dependencies": [],
            "details": "Express 라우터로 문제 관련 API 엔드포인트 구현. POST /problems (생성), GET /problems (조회), PUT /problems/:id (수정), DELETE /problems/:id (삭제). 문제 유형별 검증 로직, 파일 업로드 처리, 에러 핸들링 포함.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "문제 데이터 모델 및 데이터베이스 스키마 설계",
            "description": "문제, 선택지, 정답 정보를 저장할 PostgreSQL 테이블 구조 설계",
            "dependencies": [],
            "details": "problems, choices, answers 테이블 설계. 문제 유형(객관식, 주관식, 서술형), 난이도, 출제자, 생성일시 등 필드 포함. 외래키 관계 설정, 인덱스 최적화, 마이그레이션 스크립트 작성.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "태그 및 카테고리 시스템 구현",
            "description": "문제 분류를 위한 다계층 태그 및 카테고리 관리 시스템 개발",
            "dependencies": [
              "4.2"
            ],
            "details": "categories, tags, problem_tags 테이블 구성. 계층형 카테고리 구조(과목 > 단원 > 소단원), 태그 자동 완성, 태그 통계, 카테고리별 문제 필터링 API, 태그 관리 인터페이스.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "문제 검색 및 필터링 엔진 개발",
            "description": "키워드, 태그, 카테고리 기반 고급 문제 검색 시스템 구현",
            "dependencies": [
              "4.3"
            ],
            "details": "Elasticsearch 또는 PostgreSQL Full-Text Search 활용. 키워드 검색, 태그 필터, 카테고리 필터, 난이도 범위, 출제자별 필터. 검색 결과 정렬, 페이지네이션, 검색 히스토리 저장.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "문제집 빌더 인터페이스 개발",
            "description": "드래그앤드롭 방식의 직관적인 문제집 구성 UI 구현",
            "dependencies": [
              "4.1",
              "4.4"
            ],
            "details": "React DnD 라이브러리로 문제 선택 및 순서 조정 인터페이스. 문제 미리보기, 실시간 문제집 구성, 문제별 가중치 설정, 자동 저장, 구성 진행률 표시, 문제집 메타데이터 입력.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "문제집 템플릿 및 공유 기능 구현",
            "description": "재사용 가능한 문제집 템플릿과 교사 간 공유 시스템 개발",
            "dependencies": [
              "4.5"
            ],
            "details": "templates, shared_problemsets 테이블 구성. 템플릿 저장/불러오기, 공유 권한 설정(공개/비공개/특정 사용자), 템플릿 카테고리 분류, 즐겨찾기, 다운로드 통계, 공유 링크 생성.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "문제집 버전 관리 시스템 구축",
            "description": "문제집 변경 내역 추적 및 버전별 복원 기능 개발",
            "dependencies": [
              "4.6"
            ],
            "details": "problemset_versions 테이블로 변경 이력 관리. 자동 버전 생성, 변경 내용 diff 표시, 특정 버전으로 복원, 버전별 메모/태그, 브랜치 및 병합 기능, 변경 알림 시스템.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "문제 생성/편집 에디터 UI 개발",
            "description": "리치 텍스트 에디터와 수식 입력을 지원하는 문제 작성 인터페이스 구현",
            "dependencies": [
              "4.1",
              "4.3"
            ],
            "details": "Quill 또는 TinyMCE 기반 에디터 구성. LaTeX 수식 렌더링(KaTeX), 이미지/파일 첨부, 문제 유형별 입력 폼, 실시간 미리보기, 자동 저장, 맞춤법 검사, 템플릿 적용 기능.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 5,
        "title": "망각곡선 기반 스마트 복습 시스템 개발",
        "description": "에빙하우스 망각곡선 이론 기반 개인화된 복습 스케줄링",
        "details": "복습 주기 알고리즘 (20분, 1시간, 8시간, 1일, 3일, 7일, 14일, 30일), 문제별 개별 진도 추적, 적응형 난이도 조정 (다시/어려움/알맞음/쉬움), 복습 카드 UI, 진도율 계산, 스케줄러 서비스, 알림 시스템.",
        "testStrategy": "복습 주기 계산 정확성, 난이도 조정 로직, 개별 문제 진도 추적, 완료율 계산, 스케줄링 정확성",
        "priority": "high",
        "dependencies": [
          3,
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "공지사항 관리 및 알림 시스템 구축",
        "description": "계층적 공지사항 배포, 읽음 추적, 푸시 알림 시스템",
        "details": "공지사항 CRUD, 대상별 배포 (전체/반/개인), 중요도 설정, 읽음 상태 실시간 추적, FCM 푸시 알림, 미확인자 재알림, 공지 고정 기능, 첨부파일 지원, 예약 발송, Socket.io 실시간 업데이트.",
        "testStrategy": "공지 작성 및 배포, 읽음 상태 추적, 푸시 알림 수신 확인, 대상별 필터링, 실시간 업데이트",
        "priority": "medium",
        "dependencies": [
          2,
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "학생 커뮤니티 게시판 시스템 개발",
        "description": "시험 문제 복기, 합격 수기, 과제 제출 게시판 구현",
        "details": "게시판 카테고리 시스템, 게시글 CRUD, 댓글 및 대댓글, 좋아요 시스템, 파일 첨부, 해시태그, 검색 기능, 무한 스크롤, 조회수 추적, 게시글 신고 기능, 관리자 모더레이션.",
        "testStrategy": "게시글 작성/수정/삭제, 댓글 시스템, 좋아요 기능, 파일 업로드, 검색 및 필터링, 권한 제어",
        "priority": "medium",
        "dependencies": [
          2,
          3,
          6
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "GPS 기반 근태 관리 시스템 구현",
        "description": "위치 기반 자동 출퇴근, QR 코드 백업, 근태 현황 관리",
        "details": "GPS 위치 검증 (50m 반경), 자동 출퇴근 체크, QR 코드 스캔 백업, 근무 시간 자동 계산, 지각/조퇴/결근 분류, 월간 근태 리포트, 급여 연동 데이터, 실시간 근태 현황, 위치 히스토리.",
        "testStrategy": "GPS 위치 정확성, 출퇴근 자동 기록, QR 코드 인식, 근무 시간 계산, 근태 상태 분류, 리포트 생성",
        "priority": "medium",
        "dependencies": [
          2,
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "교사 협업 및 회의 관리 시스템 개발",
        "description": "회의록 작성, 안건 관리, 교육 자료 공유 플랫폼",
        "details": "회의 생성 및 일정 관리, 회의록 작성 도구, 안건 등록 및 투표, 액션 아이템 추적, 교육 자료 중앙 저장소, 파일 공유, 교사 간 메시징, 캘린더 통합, 문서 버전 관리.",
        "testStrategy": "회의 생성 및 관리, 회의록 작성/저장, 안건 투표, 파일 공유, 액션 아이템 추적, 캘린더 동기화",
        "priority": "medium",
        "dependencies": [
          2,
          3,
          6
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "학습 분석 대시보드 및 리포팅 시스템 구축",
        "description": "실시간 학습 현황, 성과 분석, 관리자 대시보드 구현",
        "details": "학생별/반별 진도 히트맵, 문제별 정답률 분석, 취약 영역 자동 식별, 주간/월간 학습 리포트, 관리자 통합 대시보드, 실시간 차트 및 그래프, PDF 리포트 생성, 학습 패턴 분석, 예측 분석.",
        "testStrategy": "대시보드 데이터 정확성, 실시간 업데이트, 차트 렌더링, PDF 생성, 필터링 기능, 성능 최적화",
        "priority": "medium",
        "dependencies": [
          4,
          5,
          6,
          7,
          8
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Git 기반 CI/CD 파이프라인 및 배포 워크플로우 구축",
        "description": "로컬/도커/EC2 환경 간 일관성 확보를 위한 Git 중심 이미지 태그 기반 배포 시스템 구축 및 GitHub Actions CI/CD 파이프라인 설정",
        "details": "1. GitHub 레포지토리 연결 및 SSH 키 설정\n2. Docker 멀티스테이지 빌드 최적화\n3. GitHub Actions 워크플로우 구성:\n   - 코드 푸시 시 자동 빌드\n   - Docker 이미지 태깅 전략 (git commit hash, branch, semantic versioning)\n   - Docker Hub/ECR 자동 푸시\n   - 테스트 자동화 실행\n4. EC2 배포 자동화:\n   - GitHub Actions에서 EC2로 배포 스크립트 실행\n   - Docker Compose 업데이트 및 컨테이너 재시작\n   - 블루-그린 또는 롤링 배포 전략\n5. 환경별 설정 관리:\n   - .env 파일 템플릿 생성\n   - Secrets 관리 (GitHub Secrets, EC2 환경변수)\n   - 데이터베이스 마이그레이션 자동화\n6. 디버깅 및 모니터링 도구:\n   - 로그 집중화 (ELK Stack or CloudWatch)\n   - 헬스체크 엔드포인트\n   - 배포 상태 알림 (Slack/Email)\n7. 롤백 메커니즘:\n   - 이전 이미지 태그로 즉시 롤백\n   - 데이터베이스 백업 및 복구\n8. 보안 설정:\n   - EC2 보안 그룹 최적화\n   - SSL 인증서 자동 갱신\n   - 컨테이너 보안 스캔",
        "testStrategy": "1. 로컬 환경에서 Git 커밋 후 자동 빌드 확인\n2. 브랜치별 이미지 태깅 및 레지스트리 푸시 검증\n3. EC2에서 자동 배포 완료 후 서비스 정상 동작 확인\n4. 의도적 장애 상황에서 롤백 기능 테스트\n5. 환경별 설정 파일 적용 확인\n6. 로드 밸런싱 및 무중단 배포 검증\n7. 보안 스캔 결과 및 취약점 점검\n8. 모니터링 대시보드에서 메트릭 수집 확인\n9. 다양한 시나리오별 배포 테스트 (핫픽스, 기능 배포, 마이그레이션)\n10. 팀 멤버들과 함께 전체 워크플로우 시연 및 문서화",
        "status": "done",
        "dependencies": [
          1,
          2
        ],
        "priority": "medium",
        "subtasks": [
          {
            "id": 1,
            "title": "GitHub 레포지토리 연결 및 Docker 멀티스테이지 빌드 최적화",
            "description": "GitHub 레포지토리 연결, SSH 키 설정, Docker 멀티스테이지 빌드 파일 최적화 및 이미지 크기 최소화",
            "dependencies": [],
            "details": "1. GitHub 레포지토리 초기 설정 및 SSH 키 생성/등록\n2. Dockerfile 멀티스테이지 빌드로 최적화 (빌드 단계와 런타임 단계 분리)\n3. .dockerignore 파일 설정으로 불필요한 파일 제외\n4. 베이스 이미지 선택 최적화 (alpine 기반)\n5. 레이어 캐싱 전략 적용\n6. 프론트엔드/백엔드 별도 빌드 최적화",
            "status": "done",
            "testStrategy": "로컬에서 Docker 빌드 시간 및 이미지 크기 측정, SSH 연결 테스트, 멀티스테이지 빌드 각 단계 검증"
          },
          {
            "id": 2,
            "title": "GitHub Actions CI/CD 워크플로우 구성 및 테스트 자동화",
            "description": "코드 푸시 시 자동 빌드, 테스트 실행, Docker 이미지 빌드 및 태깅 전략 구현",
            "dependencies": [
              "11.1"
            ],
            "details": "1. .github/workflows/ci-cd.yml 파일 생성\n2. 트리거 조건 설정 (push, pull_request)\n3. 환경별 매트릭스 빌드 설정\n4. 자동 테스트 실행 (단위 테스트, 통합 테스트)\n5. Docker 이미지 태깅 전략 구현:\n   - git commit hash 기반 태그\n   - 브랜치명 기반 태그\n   - semantic versioning 태그\n6. 빌드 실패 시 알림 설정",
            "status": "done",
            "testStrategy": "다양한 브랜치에서 푸시 테스트, 테스트 실패 시 워크플로우 중단 확인, 태깅 전략 검증"
          },
          {
            "id": 3,
            "title": "Docker 레지스트리 연동 및 이미지 자동 푸시",
            "description": "Docker Hub/ECR 연동, 이미지 자동 푸시, 레지스트리 인증 및 보안 설정",
            "dependencies": [
              "11.2"
            ],
            "details": "1. Docker Hub 또는 AWS ECR 레지스트리 설정\n2. GitHub Secrets에 레지스트리 인증 정보 등록\n3. 워크플로우에 이미지 푸시 단계 추가\n4. 이미지 보안 스캔 (Trivy/Clair) 통합\n5. 취약점 발견 시 푸시 중단 로직\n6. 이미지 메타데이터 및 라벨 관리\n7. 레지스트리 용량 관리를 위한 이미지 정리 정책",
            "status": "done",
            "testStrategy": "이미지 푸시 성공 확인, 태그별 이미지 저장 검증, 보안 스캔 결과 확인, 인증 실패 시나리오 테스트"
          },
          {
            "id": 4,
            "title": "EC2 배포 자동화 및 무중단 배포 전략 구현",
            "description": "GitHub Actions에서 EC2로 자동 배포, Docker Compose 업데이트, 롤링/블루-그린 배포 구현",
            "dependencies": [
              "11.3"
            ],
            "details": "1. EC2 인스턴스 SSH 키 설정 및 GitHub Actions에서 접근 설정\n2. 배포 스크립트 작성 (deploy.sh)\n3. Docker Compose 파일 동적 업데이트\n4. 롤링 배포 또는 블루-그린 배포 전략 선택 및 구현\n5. 헬스체크 기반 배포 완료 확인\n6. 로드 밸런서 연동 (Nginx/ALB)\n7. 배포 실패 시 자동 롤백 메커니즘\n8. 배포 로그 및 상태 모니터링",
            "status": "done",
            "testStrategy": "무중단 배포 시나리오 테스트, 헬스체크 실패 시 롤백 확인, 동시 사용자 접속 상태에서 배포 테스트"
          },
          {
            "id": 5,
            "title": "환경별 설정 관리, 모니터링 및 보안 강화",
            "description": "환경별 설정 파일 관리, Secrets 보안, 로그 모니터링, 보안 설정 최적화 구현",
            "dependencies": [
              "11.4"
            ],
            "details": "1. .env 파일 템플릿 및 환경별 설정 관리\n2. GitHub Secrets와 EC2 환경변수 연동\n3. 데이터베이스 마이그레이션 자동화\n4. 로그 집중화 시스템 구축 (ELK Stack 또는 CloudWatch)\n5. 헬스체크 엔드포인트 구현\n6. Slack/Email 배포 알림 시스템\n7. EC2 보안 그룹 최적화\n8. SSL 인증서 자동 갱신 (Let's Encrypt)\n9. 컨테이너 보안 스캔 및 모니터링 대시보드 구성",
            "status": "done",
            "testStrategy": "환경별 설정 적용 확인, 로그 수집 및 알림 테스트, 보안 스캔 결과 검증, SSL 인증서 갱신 테스트, 모니터링 메트릭 수집 확인"
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-08-24T16:29:04.828Z",
      "updated": "2025-08-25T01:42:56.767Z",
      "description": "Tasks for master context"
    }
  }
}