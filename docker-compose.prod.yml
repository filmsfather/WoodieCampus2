version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: woodiecampus-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-woodiecampus}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - woodiecampus-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: woodiecampus-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - woodiecampus-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Backend API Server
  backend:
    image: ${REGISTRY:-ghcr.io}/filmsfather/woodiecampus-backend:${IMAGE_TAG:-latest}
    container_name: woodiecampus-backend
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-woodiecampus}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_URL: redis://redis:6379
      FRONTEND_URL: ${FRONTEND_URL:-https://woodiecampus.com}
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      BCRYPT_SALT_ROUNDS: ${BCRYPT_SALT_ROUNDS:-12}
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/logs:/app/logs
    networks:
      - woodiecampus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Frontend React App
  frontend:
    image: ${REGISTRY:-ghcr.io}/filmsfather/woodiecampus-frontend:${IMAGE_TAG:-latest}
    container_name: woodiecampus-frontend
    networks:
      - woodiecampus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # API Gateway (Nginx)
  gateway:
    image: ${REGISTRY:-ghcr.io}/filmsfather/woodiecampus-nginx:${IMAGE_TAG:-latest}
    container_name: woodiecampus-gateway
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    volumes:
      - ./certs:/etc/nginx/certs:ro
      - ./nginx/logs:/var/log/nginx
    networks:
      - woodiecampus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/gateway/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # 로그 수집을 위한 Fluentd (선택사항)
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: woodiecampus-fluentd
    volumes:
      - ./fluentd/conf:/fluentd/etc
      - ./backend/logs:/var/log/backend
      - ./nginx/logs:/var/log/nginx
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      - woodiecampus-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    profiles:
      - logging

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/redis

networks:
  woodiecampus-network:
    driver: bridge
    name: woodiecampus-network